<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="llf.llf.mapper.PostMapper">

    <resultMap id="BaseResultMap" type="llf.llf.pojo.Post">
        <id property="id" column="id" jdbcType="INTEGER"/>
        <result property="userId" column="user_id" jdbcType="INTEGER"/>
        <result property="categoryId" column="category_id" jdbcType="INTEGER"/>
        <result property="title" column="title" jdbcType="VARCHAR"/>
        <result property="content" column="content" jdbcType="LONGVARCHAR"/>
        <result property="summary" column="summary" jdbcType="VARCHAR"/>
        <result property="cover" column="cover" jdbcType="VARCHAR"/>
        <result property="status" column="status" jdbcType="TINYINT"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
        <result property="updateTime" column="update_time" jdbcType="TIMESTAMP"/>
    </resultMap>

    <resultMap id="PostWithAuthorMap" type="llf.llf.pojo.Post" extends="BaseResultMap">
        <association property="author" javaType="llf.llf.pojo.User">
            <id property="id" column="author_id"/>
            <result property="name" column="author_name"/>
            <result property="username" column="author_username"/>
            <result property="avatar" column="author_avatar"/>
        </association>
        <association property="category" javaType="llf.llf.pojo.Category">
            <id property="id" column="category_id"/>
            <result property="name" column="category_name"/>
            <result property="description" column="category_description"/>
        </association>
    </resultMap>

    <sql id="Base_Column_List">
        id, user_id, category_id, title, content, summary, cover, status, create_time, update_time
    </sql>

    <insert id="add" parameterType="llf.llf.pojo.Post" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO post (user_id, category_id, title, content, summary, cover, status, create_time, update_time)
        VALUES (#{userId}, #{categoryId}, #{title}, #{content}, #{summary}, #{cover}, #{status}, NOW(), NOW())
    </insert>

    <update id="update" parameterType="llf.llf.pojo.Post">
        UPDATE post SET
            category_id = #{categoryId},
            title = #{title},
            content = #{content},
            summary = #{summary},
            cover = #{cover},
            status = #{status},
            update_time = NOW()
        WHERE id = #{id}
    </update>

    <delete id="deleteById">
        DELETE FROM post WHERE id = #{id}
    </delete>

    <select id="selectAll" resultMap="PostWithAuthorMap">
        SELECT p.*, 
               u.id as author_id, u.name as author_name, u.username as author_username, u.avatar as author_avatar,
               c.name as category_name, c.description as category_description
        FROM post p
        LEFT JOIN user u ON p.user_id = u.id
        LEFT JOIN category c ON p.category_id = c.id
        ORDER BY p.create_time DESC
    </select>

    <select id="selectById" resultMap="PostWithAuthorMap">
        SELECT p.*,
               u.id as author_id, u.name as author_name, u.username as author_username, u.avatar as author_avatar,
               c.name as category_name, c.description as category_description
        FROM post p
        LEFT JOIN user u ON p.user_id = u.id
        LEFT JOIN category c ON p.category_id = c.id
        WHERE p.id = #{id}
    </select>

    <select id="selectByUserId" resultMap="PostWithAuthorMap">
        SELECT p.*,
               u.id as author_id, u.name as author_name, u.username as author_username, u.avatar as author_avatar,
               c.name as category_name, c.description as category_description
        FROM post p
        LEFT JOIN user u ON p.user_id = u.id
        LEFT JOIN category c ON p.category_id = c.id
        WHERE p.user_id = #{userId}
        ORDER BY p.create_time DESC
    </select>

    <select id="selectByCategoryId" resultMap="PostWithAuthorMap">
        SELECT p.*,
               u.id as author_id, u.name as author_name, u.username as author_username, u.avatar as author_avatar,
               c.name as category_name, c.description as category_description
        FROM post p
        LEFT JOIN user u ON p.user_id = u.id
        LEFT JOIN category c ON p.category_id = c.id
        WHERE p.category_id = #{categoryId}
        ORDER BY p.create_time DESC
    </select>

    <select id="selectByStatus" resultMap="PostWithAuthorMap">
        SELECT p.*,
               u.id as author_id, u.name as author_name, u.username as author_username, u.avatar as author_avatar,
               c.name as category_name, c.description as category_description
        FROM post p
        LEFT JOIN user u ON p.user_id = u.id
        LEFT JOIN category c ON p.category_id = c.id
        WHERE p.status = #{status}
        ORDER BY p.create_time DESC
    </select>

    <select id="selectPublishedPosts" resultMap="PostWithAuthorMap">
        SELECT p.*,
               u.id as author_id, u.name as author_name, u.username as author_username, u.avatar as author_avatar,
               c.name as category_name, c.description as category_description
        FROM post p
        LEFT JOIN user u ON p.user_id = u.id
        LEFT JOIN category c ON p.category_id = c.id
        WHERE p.status = 1
        ORDER BY p.create_time DESC
        LIMIT #{offset}, #{limit}
    </select>

    <select id="countPublishedPosts" resultType="int">
        SELECT COUNT(*) FROM post WHERE status = 1
    </select>

</mapper>
